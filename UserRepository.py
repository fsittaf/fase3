from User import Admin
from DateUtils import get_current_time

# Talvez usar um json p salvar temporariamente?
# Colocar User no init do repository?

# Repository


class UserRepository:
    """
    Class to manage the CRUD operations on the database

    Attributes:
        user_id     uuid autogenerated (unique)
        name        String
        last_name   String
        email       String (unique)
        age         String
        role        Role object
        created_at  timestamp
        updated_at  timestamp

    """

    def __init__(self) -> None:
        self._users = []
        self._default_user = self.create_default_user()

    def create_default_user(self):
        user_def = "admin-default"
        pass_def = "admin"
        email_def = "default@void.test"
        print("--------------------------------------------------------------------")
        print(
            f"\t1st Login into system, creating default user:\n\tLogin Credentials: email: {email_def}, password: {pass_def}",
        )
        print("--------------------------------------------------------------------")

        default_user = Admin(
            name=user_def, password=pass_def, role="admin", email=email_def
        )
        self._users.append(default_user)
        return default_user

    def add(self, user) -> None:
        """
        To create  a new user to the collection
        """
        for u in self._users:
            if u.email == user.email:
                raise Exception("Email already in use")
        self._users.append(user)

    def get(self, id):
        """
        Return the user object based on an ID
        :param id: uuid
        :return: User object
        """
        return next((user for user in self._users if user.user_id == id), None)

    def get_by_email(self, email):
        """
        Return the User belonging to the e-mail parameter passed in
        :param email: String user e-mail
        :return: User object
        """
        return next((user for user in self._users if user.email == email), None)

    def get_all(self) -> list:
        """
        Get all users from the collection
        :return: List of User objects
        """
        if len(self._users) == 0:
            print("No users created")
        return self._users

    def update(self, old_user, session_user) -> None:
        """
        User object is modified with new data
        :param old_user: User object data
        :param new_user: User object data
        """
        user = self.get(old_user.user_id)
        user.name = old_user.name
        user.last_name = old_user.last_name
        user.email = old_user.email
        user.password = old_user.password
        user.age = old_user.age
        user.role = old_user.role
        user.created_at = old_user.created_at
        if old_user.role == "user":
            user.user_data = old_user.user_data
        user.updated_at = get_current_time()
        # self.delete(old_user.user_id)
        # self.add(new_user, session_user)

    def delete(self, id, session_user):
        """
        Remove the record belonging to an ID passed In from the Users collection
        :param id: Int USer Identifier
        """
        for user in self._users:
            if user.user_id == id:
                self._users.remove(user)
                return
        raise Exception("User not found.")
