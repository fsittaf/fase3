from User import User

# Talvez usar um json p salvar temporariamente?
# Colocar User no init do repository?

# Repository


class UserRepository:
    '''
        Class to manage the CRUD operations on the database

        Attributes:
            user_id     uuid autogenerated (unique)
            name        String
            last_name   String
            email       String (unique)
            age         String
            role        Role object
            created_at  timestamp
            updated_at  timestamp

    '''

    def __init__(self) -> None:
        self._users = []
        self._default_user = self.create_default_user()

    def create_default_user(self):
        return User(
            name='admin',
            password='admin',
            role='admin'
        )

    def add(self, user) -> None:
        '''
        To create  a new user to the collection
        '''
        for u in self._users:
            if u.email == user.email:
                raise Exception("Email already in use")
        self._users.append(user)

    def get(self, id):
        '''
        Return the user object based on an ID
        :param id: uuid
        :return: User object
        '''
        return next((user for user in self._users if user.user_id == id), None)

    def get_by_email(self, email):
        '''
        Return the User belonging to the e-mail parameter passed in
        :param email: String user e-mail
        :return: User object
        '''
        return next((user for user in self._users if user.email == email), None)

    def get_all(self) -> list:
        '''
        Get all users from the collection
        :return: List of User objects
        '''
        if len(self._users) == 0:
            print('No users created')
        return self._users

    def update(self, old_user, new_user, session_user) -> None:
        '''
        User object is modified with new data
        :param old_user: User object data
        :param new_user: User object data
        '''
        self.delete(old_user.user_id)
        self.add(new_user, session_user)

    def delete(self, id):
        '''
        Remove the record belonging to an ID passed In from the Users collection
        :param id: Int USer Identifier
        '''
        for user in self._users:
            if user.user_id == id:
                self._users.remove(user)
                return
        raise Exception("User not found.")
